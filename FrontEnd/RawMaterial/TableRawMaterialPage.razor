@page "/RawMaterials/all"

@using FrontEnd.Models
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject MudBlazor.ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudButton OnClick="@(() => ToNewRawMaterial())" Variant="Variant.Outlined" Color="Color.Primary">Adiconar nova Materia Prima</MudButton>

<MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<RawMaterial, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Materias primas</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nome</MudTh>
        <MudTh>Descrição</MudTh>
        <MudTh>Fornecedor</MudTh>
        <MudTh>Validade</MudTh>
        <MudTh>Quantidade</MudTh>
        <MudTh>Ações</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Descrição">@context.Description</MudTd>
        <MudTd DataLabel="Fornecedor">@context.SupplierId</MudTd>
        <MudTd DataLabel="Validade">@context.Expiration</MudTd>
        <MudTd DataLabel="Quantidade">@context.Amount</MudTd>
        <MudTd DataLabel=""><MudButton OnClick="@(() => OnEditById(context.Id))" Variant="Variant.Outlined" Color="Color.Warning">Editar</MudButton></MudTd>
        <MudTd DataLabel=""><MudButton OnClick="@(() => OnDeleteById(context.Id))" Variant="Variant.Outlined" Color="Color.Error">Deletar</MudButton></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Class="align-self-center d-inline">Selected1: @selectedItem1?.Name</MudText>
    </div>
</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";

    private RawMaterial selectedItem1 = null;
    private HashSet<RawMaterial> selectedItems = new HashSet<RawMaterial>();

    private IEnumerable<RawMaterial> Elements = new List<RawMaterial>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<RawMaterial>>("https://localhost:7008/api/RawMaterials?query=teste'");

        if (Elements == null)
        {
            Elements = new List<RawMaterial>();
        }
    }

    private bool FilterFunc1(RawMaterial element) => FilterFunc(element, searchString1);

    private bool FilterFunc(RawMaterial element, string searchString)
    {
        if (element == null)
            return false;

        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.Name != null && element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.Description != null && element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.SupplierId != null && element.SupplierId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task OnEditById(int id)
    {
        NavigationManager.NavigateTo($"/RawMaterials/edit/{id}");
    }
    private async Task ToNewRawMaterial()
    {
        NavigationManager.NavigateTo($"/RawMaterials/new");
    }

    private async Task OnDeleteById(int id)
    {
        var response = await httpClient.DeleteAsync($"https://localhost:7008/api/RawMaterials/{id}");

        if (response.IsSuccessStatusCode)
        {
            Elements = Elements.Where(e => e.Id != id).ToList();

            Snackbar.Add("Produto deletado com sucesso!", MudBlazor.Severity.Success);

            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Erro ao deletar o produto.", MudBlazor.Severity.Error);
        }
    }
}
