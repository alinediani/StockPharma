@page "/RawMaterials/new"
@using System.ComponentModel.DataAnnotations
@using FrontEnd.Models
@using FrontEnd.Enums
@inject HttpClient httpClient
@inject MudBlazor.ISnackbar Snackbar
@inject NavigationManager NavigationManager

<h3>Cadastro de novo produto</h3>

<EditForm Model="@novaMateria" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Id" HelperText="Código do fornecedor"
                                  @bind-Value="novaMateria.SupplierId" For="@(() => novaMateria.SupplierId)" />
                    <MudTextField Label="Nome" HelperText="Min. 4 caracteres"
                                  @bind-Value="novaMateria.Name" For="@(() => novaMateria.Name)" />
                    <MudTextField Label="Descrição" Class="mt-3"
                                  @bind-Value="novaMateria.Description" For="@(() => novaMateria.Description)" />
                    <MudTextField Label="Quantidade" HelperText="Adicione uma quantidade dessa matéria prima" Class="mt-3"
                                  @bind-Value="novaMateria.Amount" For="@(() => novaMateria.Amount)" InputType="InputType.Number" />

                    
                    <MudSelect T="UoM" Label="Unidade de Medida" @bind-Value="novaMateria.UoM" Class="mt-3">
                        @foreach (UoM unit in Enum.GetValues(typeof(UoM)))
                        {
                            <MudSelectItem T="UoM" Value="unit">@unit.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Cadastrar</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudDatePicker Label="Data de validade" Editable="true" @bind-Date="novaMateria.Expiration" Placeholder="Selecione a data de validade" />
                <MudText Typo="Typo.subtitle2">Resumo de Validação</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Produto cadastrado com sucesso!</MudText>
                }
                else if (error)
                {
                    <MudText Color="Color.Error">Ocorreu um erro ao cadastrar o produto.</MudText>
                }
                else
                {
                    <MudText Color="Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>

</EditForm>

@code {
    RawMaterial novaMateria = new RawMaterial();

    bool success;
    bool error;

    private async Task OnValidSubmit(EditContext context)
    {
        success = false;
        error = false;

        try
        {
            var response = await httpClient.PostAsJsonAsync("https://localhost:7008/RawMaterials/new", novaMateria);

            if (response.IsSuccessStatusCode)
            {
                success = true;
                
                novaMateria = new RawMaterial();
                Snackbar.Add("Produto adicionado com sucesso!", MudBlazor.Severity.Success);
            }
            else
            {
                error = true;
                Snackbar.Add("Erro ao adicionar Produto", MudBlazor.Severity.Error);
            }
        }
        catch (Exception)
        {
            error = true;
        }

        StateHasChanged();
    }

}
