@page "/Products/all"

@using FrontEnd.Models
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<MudButton OnClick="@(() => ToNewProduct())" Variant="Variant.Outlined" Color="Color.Primary">Adiconar novo Produto</MudButton>

<MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Product, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Materias primas</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nome</MudTh>
        <MudTh>Descrição</MudTh>
        <MudTh>Preço</MudTh>
        <MudTh>Quantidade</MudTh>
        <MudTh>Ações</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Descrição">@context.Description</MudTd>
        <MudTd DataLabel="Fornecedor">@context.Price</MudTd>
        <MudTd DataLabel="Quantidade">@context.Amount</MudTd>
        <MudTd DataLabel=""><MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(() => DeleteById(context.Id))">Deletar</MudButton></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Class="align-self-center d-inline">Selected1: @selectedItem1?.Name</MudText>
    </div>
</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";

    private void ToNewProduct()
    {
        NavigationManager.NavigateTo("/Products/new");
    }

    private Product selectedItem1 = null;
    private HashSet<Product> selectedItems = new HashSet<Product>();

    private IEnumerable<Product> Elements = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Product>>("https://localhost:7008/api/Products?query=buscaProdutos");

        if (Elements == null)
        {
            Elements = new List<Product>();
        }
    }
    private void DeleteById(int id)
    {
        //add url de exclusão
        StateHasChanged();
    }

    private bool FilterFunc1(Product element) => FilterFunc(element, searchString1);


    private bool FilterFunc(Product element, string searchString)
    {
        if (element == null)
            return false;

        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.Name != null && element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.Description != null && element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.Price != null && element.Price.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    
}