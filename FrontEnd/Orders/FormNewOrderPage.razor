@page "/Orders/New"
@using FrontEnd.Models
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject MudBlazor.ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using FrontEnd.Repositories
@inject OrderInMemoryRepositry Memory

<h3>Criar Novo Pedido</h3>

<EditForm Model="@newOrder" OnSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudDatePicker Label="Data do pedido" Editable="true" @bind-Date="_date" Placeholder="Selecione a data do pedido" />

                    <MudText Typo="Typo.subtitle2" Class="mt-3">Selecione o Cliente</MudText>
                    <MudSelect T="Client" @bind-Value="newOrder.Client" Label="Escolha um Cliente" Class="mt-2">
                        @foreach (var client in Clients)
                        {
                            <MudSelectItem T="Client" Value="@client">@client.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Cadastrar Pedido</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Selecione os Produtos</MudText>

                <!-- MudChipSet para seleção múltipla de produtos -->
                <MudChipSet T="Product" SelectionMode="SelectionMode.MultiSelection" @bind-Value="selectedProducts" Color="Color.Primary" Class="mt-3">
                    @foreach (var product in Products)
                    {
                        <MudChip OnClick="@(() => ToggleProductSelection(product))" Text="@product.Name" Variant="Variant.Filled" Color="Color.Info">
                            @product.Name
                        </MudChip>
                    }
                </MudChipSet>

                <MudText Typo="Typo.subtitle2" Class="mt-3">Valor Total</MudText>
                <MudTextField Label="Valor Total" @bind-Value="newOrder.TotalValue" InputType="InputType.Number" Disabled="true" />
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>
@code {
    private Order newOrder = new Order();
    private List<Product> Products = new List<Product>();
    private List<Client> Clients = new List<Client>();
    private List<Product> selectedProducts = new List<Product>();  // Lista de produtos selecionados
    private DateTime? _date = DateTime.Today;  // Usando DateTime? para permitir null

    protected override async Task OnInitializedAsync()
    {
        // Carregar Produtos e Clientes da API
        try
        {
            Products = await httpClient.GetFromJsonAsync<List<Product>>("https://localhost:7008/api/Products?query=buscaProdutos");
            Clients = await httpClient.GetFromJsonAsync<List<Client>>("https://localhost:7008/api/Clients?query=busca");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar dados do servidor: {ex.Message}", Severity.Error);
        }

        // Verifica se os dados não foram carregados corretamente e inicializa como listas vazias
        if (Products == null) Products = new List<Product>();
        if (Clients == null) Clients = new List<Client>();

        // Inicializar o pedido com um Cliente padrão
        newOrder.Client = Clients.FirstOrDefault();
        newOrder.CreatedDate = DateTime.Today;  // Inicializa com a data de hoje
    }

    private void ToggleProductSelection(Product product)
    {
        // Adiciona ou remove o produto da lista de selecionados
        if (selectedProducts.Contains(product))
        {
            selectedProducts.Remove(product);
        }
        else
        {
            selectedProducts.Add(product);
        }
        CalculateTotalValue();  // Atualiza o valor total após seleção/deseleção
    }

    private void CalculateTotalValue()
    {
        // Calcular o valor total com base nos produtos selecionados
        newOrder.TotalValue = selectedProducts.Sum(p => p.Price);
    }

    private async Task OnValidSubmit()
    {
        // Verificar se há produtos selecionados
        if (selectedProducts.Any())
        {
            // Garantir que a data não seja nula
            newOrder.CreatedDate = _date ?? DateTime.Now; // Se _date for nulo, atribui DateTime.Now
            newOrder.Products = selectedProducts;

            Memory.Add(newOrder);
            // Enviar o pedido via API
            var response = true;

            if (response)
            {
                Snackbar.Add("Pedido criado com sucesso!", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Snackbar.Add("Erro ao criar pedido. Tente novamente.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Por favor, selecione pelo menos um produto.", Severity.Error);
        }
    }
}
